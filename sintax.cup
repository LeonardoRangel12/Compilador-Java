import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
parser code {: 
  public boolean syntaxErrors;


  Lexer lexer;
 
  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }
:}; 
/* Terminals */
terminal         SEMICOLON, COMMA, LPAR, RPAR, BEGIN, END,IF, ELSE, WHILE, READ, WRITE, ASSIGN;
terminal INTCONST, PLUS, MINUS, MULT, DIV, MOD, LEQ, GTQ, EQ, NEQ, LE, GT;
terminal OpArit BINOP;
terminal String  IDENT,STRINGCONST;
terminal Float  FLOATCONST;
terminal Type   TYPE;
terminal OpRel COMP;
/* Non-terminals */
non terminal Program        program;
non terminal Scope          scope;
non terminal Decl           decl;
non terminal List<AstNode>        stmtlist;
non terminal AstNode        stmt;
non terminal While          while;
non terminal If             if;
non terminal Expr           expr;
non terminal Condition           cond;


/* Parser rules */
program ::= stmtlist:sl{: RESULT = new Program(sl); :};


decl ::= TYPE:type IDENT:id{: RESULT = new Decl(type, id, null); :}
       | TYPE:type IDENT:id ASSIGN expr:e {: RESULT = new Decl(type, id, e); :};

scope ::= BEGIN stmtlist:sl END {: RESULT = new Scope(sl); :};

stmtlist ::= stmt:s{: List<AstNode> sl = new ArrayList<AstNode>(); sl.add(s); RESULT = sl; :}
            | stmtlist:sl stmt:s {: sl.add(s); RESULT = sl; :};

stmt ::= IDENT:id ASSIGN expr:e {: RESULT = new Assign(id, e); :}
        | if:i {: RESULT = i; :}
        | while:w {: RESULT = w; :}
        | READ LPAR IDENT:id RPAR {: RESULT = new Read(id); :}
        | WRITE LPAR expr:e RPAR  {: RESULT = new Write(e); :}
        | decl:d {: RESULT = d; :}
        ;

while ::= WHILE cond:c scope:sl {: RESULT = new While(c, sl); :};

if ::= IF cond:c scope:sl ELSE scope:sl2 {: RESULT = new If(c, sl); :}
      | IF cond:c scope:sl {: RESULT = new If(c, sl); :};

expr ::= INTCONST:i {: RESULT = new Expr(i, Type.INT); :}
        | FLOATCONST:f {: RESULT = new Expr(f, Type.FLOAT); :}
        | STRINGCONST:s {: RESULT = new Expr(s, Type.STRING); :}
        | IDENT:id {: RESULT = new Expr(id, Type.IDENT); :}
        | expr:e BINOP:OP expr:e2 {: RESULT = new Expr(e, OP, e2); :}
        | LPAR expr:e RPAR {: RESULT = e; :};

cond ::= expr:e COMP:comp expr:e2 {: RESULT = new Condition(e, comp, e2); :};



